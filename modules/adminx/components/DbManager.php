<?php

namespace app\modules\adminx\components;

use app\components\AccessHelper;
use app\modules\adminx\models\UserM as User;
use yii\db\Query;
use yii\rbac\Assignment;
use yii\rbac\Item;
use yii\web\ForbiddenHttpException;


class DbManager extends \yii\rbac\DbManager
{
    private $_checkAccessAssignments = [];

    private $_userRoles;
    private $_userRolesPermissions;
    private $_userId;

    /**
     * @var string
     */
    public $permCacheKey = 'perm';
    public $permCacheKeyDuration = 180;


    public function init()
    {
        $this->_userId = \Yii::$app->user->id;
        $this->permCacheKey = \Yii::$app->configs->permCacheKey;
        $this->permCacheKeyDuration = \Yii::$app->configs->permCacheKeyDuration;
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function getRoleChildrenRecursive($roleName, &$target)
    {
        $query = new Query();
        $children = $query
            ->select("ch.child, par.rule_name")
            ->from("$this->itemChildTable ch" )
            ->innerJoin("$this->itemTable par", "ch.child = par.name")
            ->where(['ch.parent' => $roleName, 'par.type' => 1])
            ->all($this->db);
        foreach ($children as $child) {
            $target[$child['child']] = (!empty($child['rule_name'])) ? $child['rule_name'] : '';
            $this->getRoleChildrenRecursive($child, $target);
        }

    }

    public function getPermissionChildrenRecursive($roleName, &$target)
    {
        $query = new Query();
        $children = $query
            ->select("ch.child, par.rule_name")
            ->from("$this->itemChildTable ch" )
            ->innerJoin("$this->itemTable par", "ch.child = par.name")
            ->where(['ch.parent' => $roleName, 'par.type' => 2])
            ->all($this->db);
        foreach ($children as $child) {
            $target[$child['child']] = (!empty($child['rule_name'])) ? $child['rule_name'] : '';
            $this->getPermissionChildrenRecursive($child, $target);
        }

    }

    /**
     * @return mixed
     */
    public function getUserRoles()
    {
        $i = 1;
        if (!isset($this->_userRoles)){
            if (!empty($this->_userId)){
                $this->getUserRolesPermissionsFromCahe($this->_userId);
            } else {
                $this->_userRoles = [];
            }
        }
        return $this->_userRoles;
    }

    /**
     * @return mixed
     */
    public function getUserRolesPermissions()
    {
        $i = 1;
        if (!isset($this->_userRolesPermissions)){
            if (!empty($this->_userId)){
                $this->getUserRolesPermissionsFromCahe($this->_userId);
            } else {
                $this->_userRolesPermissions = [];
            }
        }
        return $this->_userRolesPermissions;
    }




    /**
     * Получение ролей и разрешений из кеша
     * Если кеш пустой - их определение и запись в кеш
     * @return boolean
     */
    public function getUserRolesPermissionsFromCahe($userId)
    {
       //$this->invalidateCache();
        $this->_userRoles = [];
        $this->_userRolesPermissions = [];

        $data = $this->cache->get($this->permCacheKey);
        if (is_array($data) && isset($data[$userId])) {
            //-- если разрешения есть в кеше - берем их оттуда
            $this->_userRoles = (!empty($data[$userId]['userRoles'])) ? $data[$userId]['userRoles'] : [];
            $this->_userRolesPermissions = (!empty($data[$userId]['userRolesPermissions'])) ? $data[$userId]['userRolesPermissions'] : [];
            $ret = true;
        } else {
            //-- если разрешений в кеше нет, определяем, запись в кеш, возвращаем

            //-- все роли, назначенные юсеру
            $userSelfRoles =$this->getRolesByUser($userId);
            //-- все роли, назначенные юсеру, и их потомки
            foreach ($userSelfRoles as $userSelfRole){
                $this->_userRoles[$userSelfRole->name] = (isset($userSelfRole->ruleName)) ? $userSelfRole->ruleName : '';
                $this->getRoleChildrenRecursive($userSelfRole->name, $this->_userRoles);
            }

            $this->_userRolesPermissions = $this->_userRoles;

            foreach ($this->_userRoles as $userRole => $rule){
                $perm = $this->getPermissionsByRole($userRole);
                foreach ($perm as $item){
                    if (!isset($this->_userRolesPermissions[$item->name])){
                        $this->_userRolesPermissions[$item->name] = isset($item->ruleName) ? $item->ruleName : '';
                    }
                }
            }
            //-- все разрешения юсера
            $userSelfPermissions =$this->getPermissionsByUser($userId);
            //-- все разрешения юсера и их потомки
            foreach ($userSelfPermissions as $userSelfPermission){
                $this->getPermissionChildrenRecursive($userSelfPermission->name, $this->_userRolesPermissions);
            }
            //-- запись в кеш
            if (!is_array($data)){
                $data = [];
            }
            $data [$userId] = [
                'userRoles' => $this->_userRoles,
                'userRolesPermissions' => $this->_userRolesPermissions,
            ];

            $ret = $this->cache->set($this->permCacheKey, $data, $this->permCacheKeyDuration);
            if (!$ret){
                throw new ForbiddenHttpException('Cache save error');
            }
        }
        return $ret;
    }

    /**
     * @deprecated  Инициализация $_userPermissions из кеша
     * @return bool
     */
    public function getUserPermissionsFromCache($userId)
    {
        $data = $this->cache->get($this->permCacheKey);
        if (is_array($data) && isset($data[$userId])) {
            $this->_userPermissions = (!empty($data[$userId]['userPermissions'])) ? $data[$userId]['userPermissions'] : [];
            $this->_userRoles = (!empty($data[$userId]['userRoles'])) ? $data[$userId]['userRoles'] : [];
            return true;
        }

        $this->_userPermissions  = [];
        $this->_userRoles  = [];

        $permItems=$this->getPermissionsByUser($userId);
        //$pe=$this->checkAccessRecursive();
        foreach ($permItems as $item){
            $this->_userPermissions[$item->name] = (!empty($item->ruleName)) ? $item->ruleName : '';
        }
        $permItems = $this->getRolesByUser($userId);
        foreach ($permItems as $item){
            $permissions[$item->name] = (!empty($item->ruleName)) ? $item->ruleName : '';
            $this->_userRoles[$item->name] = (!empty($item->ruleName)) ? $item->ruleName : '';
        }
        if (!is_array($data)){
            $data = [];
        }
        $data [$userId] = [
            'userPermissions' => $this->_userPermissions,
            'userRoles' => $this->_userRoles,
        ];

        $ret = $this->cache->set($this->permCacheKey, $data, $this->permCacheKeyDuration);


        return $ret;
    }



    /**
     * {@inheritdoc}
     */
    public function checkAccess($userId, $permissionName, $params = [])
    {
        $t=1;
        $userRolesPermissions = $this->getUserRolesPermissions() ;
        $rr = 1;
        if (!empty($userRolesPermissions) && isset($userRolesPermissions[$permissionName])) {
            //-- если у юсера есть роли или разрешения вообще и среди них есть $permissionName
            if (!empty($userRolesPermissions[$permissionName])){
                //-- если у роли или разрешения есть правило
                $item = $this->getItem($permissionName);
                return $this->executeRule($userId, $item, $params);
            }
            return true;
        } else {
            return false;
        }
    }

    /**
     * Сброс кеша разрешений пользователей,
     * если $userId не 0 - сбрасываются данные только одного пользователя
     * @param int $userId
     * @return bool
     */
    public function invalidatePermCache($userId=0)
    {
        $ret = true;
        if ($this->cache !== null) {
            if ($userId > 0){
                $data = $this->cache->get($this->permCacheKey);
                if (is_array($data) && isset($data[$userId])) {
                    unset($data[$userId]);
                }
                if (!empty($data)){
                    $ret = $this->cache->set($this->permCacheKey, $data, $this->permCacheKeyDuration);
                } else {
                    $ret = $this->cache->delete($this->permCacheKey);
                }
            } elseif ($this->cache->exists($this->permCacheKey)) {
                $ret = $this->cache->delete($this->permCacheKey);
            }
        }
        $this->_userRoles  = [];
        $this->_userRolesPermissions  = [];
        return $ret;
    }

    /**
     * {@inheritdoc}
     */
    public function assign($role, $userId)
    {
        $ret = $this->invalidatePermCache($userId); //--xle
        $assignment = new Assignment([
            'userId' => $userId,
            'roleName' => $role->name,
            'createdAt' => time(),
        ]);

        $this->db->createCommand()
            ->insert($this->assignmentTable, [
                'user_id' => $assignment->userId,
                'item_name' => $assignment->roleName,
                'created_at' => $assignment->createdAt,
            ])->execute();

        unset($this->_checkAccessAssignments[(string) $userId]);
        return $assignment;
    }

    /**
     * {@inheritdoc}
     */
    public function revoke($role, $userId)
    {
        if ($this->isEmptyUserId($userId)) {
            return false;
        }
        $ret = $this->invalidatePermCache($userId); //--xle
        unset($this->_checkAccessAssignments[(string) $userId]);
        return $this->db->createCommand()
                ->delete($this->assignmentTable, ['user_id' => (string) $userId, 'item_name' => $role->name])
                ->execute() > 0;
    }

    /**
     * Check whether $userId is empty.
     * @param mixed $userId
     * @return bool
     */
    private function isEmptyUserId($userId)
    {
        return !isset($userId) || $userId === '';
    }

    public function invalidateCache()
    {
        if ($this->cache !== null) {
            $this->cache->delete($this->cacheKey);
            $this->items = null;
            $this->rules = null;
            $this->parents = null;
            $ret = $this->invalidatePermCache(0); //--xle
        }
        $this->_checkAccessAssignments = [];
    }

    /**
     * {@inheritdoc}
     */
    public function removeAllAssignments()
    {
        $this->_checkAccessAssignments = [];
        $this->db->createCommand()->delete($this->assignmentTable)->execute();
        $ret = $this->invalidatePermCache(0); //--xle

    }

    /**
     * {@inheritdoc}
     */
    public function revokeAll($userId)
    {
        if ($this->isEmptyUserId($userId)) {
            return false;
        }
        $ret = $this->invalidatePermCache(0); //--xle
        unset($this->_checkAccessAssignments[(string) $userId]);
        return $this->db->createCommand()
                ->delete($this->assignmentTable, ['user_id' => (string) $userId])
                ->execute() > 0;
    }




    public function getUserPermissionsFromCacheCopy($userId)
    {
        $data = $this->cache->get($this->permCacheKey);
        if (is_array($data) && isset($data[$userId])) {
            $this->_userPermissions = (!empty($data[$userId]['userPermissions'])) ? $data[$userId]['userPermissions'] : [];
            $this->_userRoles = (!empty($data[$userId]['userRoles'])) ? $data[$userId]['userRoles'] : [];
            return true;
        }

        $this->_userPermissions  = [];
        $this->_userRoles  = [];

        $permItems=$this->getPermissionsByUser($userId);
        //$pe=$this->checkAccessRecursive();
        foreach ($permItems as $item){
            $this->_userPermissions[$item->name] = (!empty($item->ruleName)) ? $item->ruleName : '';
        }
        $permItems = $this->getRolesByUser($userId);
        foreach ($permItems as $item){
            $permissions[$item->name] = (!empty($item->ruleName)) ? $item->ruleName : '';
            $this->_userRoles[$item->name] = (!empty($item->ruleName)) ? $item->ruleName : '';
        }
        if (!is_array($data)){
            $data = [];
        }
        $data [$userId] = [
            'userPermissions' => $this->_userPermissions,
            'userRoles' => $this->_userRoles,
        ];

        $ret = $this->cache->set($this->permCacheKey, $data, $this->permCacheKeyDuration);


        return $ret;
    }



}
